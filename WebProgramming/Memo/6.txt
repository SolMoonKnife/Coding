예를 들어 div 여러개를 만들고 일부가 마우스를 따라다니게 하고 싶다
-> id를 지정하고 마우스 커서 기준으로 속성을 조절해요

태그가 이벤트 리스터 속성을 가질 수 있음: 예를 들어 onclick 이벤트 리스너 속성을 지정했다 -> (앞에 on 붙는게 국룰) 태그에 바로 넣고, ="" 안에 JS 코드를 바로 넣는다. 근데 이건 잘 안쓰고...

<script></script> 태그 안에 JS 코드를 쓴다.

근데 그냥 쓰면 바로 실행되니까, 함수 형태로 적고, 함수를 태그의 이벤트 리스너 속성의 값으로 넣는다. onclick="func01(this)"

또는 여러 페이지에 동일하게 사용하기 위해 JS 파일을 별도로 작성한다.
(확장자 .js)
<script src="file_name.js"></script>

HTML5부터 js파일을 불러올 경우 <script> 태그 내부에
다른 JS 코드를 작성하면 안 된다.

document.write() // 테스트 결과 출력 하고 싶을때...
html 문서에 직접 출력하도록 할 수 있는 기본 함수...

this는 이 블록 안에서... 의미함. 전역 변수 지정 가능.

JS 연산자는 나머지 연산자를 제외하고 전부 결과가 실수로 나옴.
전위/후위 증감 연산자도 존재함.

특히 리액트에서 JS를 쓸 때, if를 사용할 수 없는 경우가 있는데,
이때 삼항 연산자 A ? B : C 많이 사용한다.

+ 연산자의 피연산자 중 하나라도 문자열이면 문자열 연결,
둘 다 숫자이면 덧셈 연산으로 작동한다.

만일 3개 이상의 피연산자가 있을 때, 순서에 따라 덧셈 연산과
연결 연산이 순차적으로 작용되니 피연산자의 순서에 유의한다.

비교 연산자는 문자열의 사전순 비교 연산에 사용될 수 있다.
(사전순 먼저 나오는 것이 작다.)

if-else / switch / for / while / do-while 모두 사용 가능

함수는 결과를 리턴하느냐? 안하느냐? 의 차이가 있는데
정확히는 반환형이 void인, 즉 반환이 없는 함수는 프로시저라고 부른다.
JS에서는 함수와 프로시저를 메서드로 묶어서 표현한다.

JS에서는 자료형을 명시하지 않으므로 반환형도 명시하지 않는다.
return 키워드의 유무로 함수와 프로시저가 느슨하게 구분된다.

cf# 비주얼 베이직의 경우 함수와 프로시저를 키워드부터 엄밀하게 구분함.
(function, sub)

[중간고사 설명] 1시간
시험은 금요일 오후 2시 기존 강의실. 범위는 오늘 배운 것까지
시험 방식은 필기 오픈북. 단, 전자기기는 일절 금지.
용어 개념 문제.
소스코드 채우기 문제.
잘못된 부분 찾기 문제.
출력 결과 예측 문제. 등등 <- HTML, CSS, JS


