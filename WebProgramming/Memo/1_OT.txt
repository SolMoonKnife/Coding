인터넷을 한다?
-> 웹브라우저를 실행해서 웹사이트에 접속한다. (웹 서비스를 이용한다)
-> 웹은 인터넷을 대표하는 서비스이다.
인터넷은 플랫폼이고 인프라다. 전세계의 거의 모든 컴퓨터를 비롯한 각종 제어 기기를 서로 연결시킨 네트워크를 의미하는 것이다. 상당히 물리적인 개념이 들어가 있는거죠. 여러분 컴퓨터에서 인터넷 이용하려면 랜선을 꽂아서 전세계 컴퓨터가 연결된 인터넷에 접속하거나 와이파이를 통해 인터넷에 접속하게 되죠
인터넷이라는게 전세계에 깔린 플랫폼이고 인프라이고 사용자는 인터넷을 통한 각종 서비스를 이용하는 것이다. 이메일 서비스라던가 웹 서비스라던가 ... 요즘은 이메일을 웹에서 사용하는 경우가 대다수라서 둘이 구분짓는 것이 어색하죠
이메일은 리눅스에 sendmail이라던가 스마트폰에 메일 앱, ms outlook같은 별도의 서비스이다.
다양한 포털 사이트가 고객을 유치하기 위해 기본적으로 많은 서비스를 제공했고, 그중 하나가 이메일 서비스이다.
FTP는 파일 전송 서비스이다. 그리고 텔넷이라고 해서 원격 제어 서비스 있습니다. 등등 많은 서비스들이 인터넷을 이용해서 구축되어있고 알게모르게 이용하고 있습니다.
소셜네트워크 같은 많은 서비스가 있죠. 이메일도 그렇지만 예전 네이트온에도 원격 제어 서비스가 있었습니다.
내 컴퓨터에 문제가 생겨서 봐달라, 서비스를 요청하면 원격 제어를 이용해서 내 컴퓨터를 살펴보죠. 
결국 인터넷을 이용하는 대부분의 서비스는 웹을 통해 제공됩니다.
인터넷이라고 하면 물리적으로는 랜 개념부터 가야해요. 그 이전에 인터넷의 개념을 세운 프로젝트가 있습니다. 미국 국방성의 알파넷. 인터넷을 염두에 둔 것은 아니고 동부와 서부가 멀리 떨어져있는데 주요통신선 몇 개가 파괴되면 연결이 끊어지는 문제가 있었음
이때 몇 가지 경로가 파괴되어도 다른 경로를 찾아 전송될 수 있는 라우팅 개념을 도입함. 이더넷 표준이 개발되면서 대학, 기관, 회사에서 로컬 네트워크를 만듭니다. 그리고 그것들을 다 연결한게 뭐다? 인터넷입니다.
그 과정에서 여러 기술이 발전하고, 여러가지 프로토콜이 개발되었죠(통신규약) -> 통신할 때 서로 정해둔 약속이죠
네트워크를 이용할 때 필요한 여러가지 약속들인 프로토콜 중 인터넷 프로토콜, TCP, UDP 등이 그때 만들어진거죠
그중에서도 우리가 사용하는 웹서비스는 HTTP라는 프로토콜을 통해 이용합니다. 전세계 정보가 하이퍼링크로 연결되어있다 -> 월드 와이드 웹
웹서비스는 웹 서버와 웹 클라이언트(서버-클라이언트)로 구성되어 있습니다.
최초의 네트워크는 중앙 집중식 네트워크(메인 프레임 사용)였습니다. 그땐 개인의 컴퓨터는 별로 성능이 좋지 않았죠
그래서 좋은 컴퓨터인 메인 프레임이 있고 모든 사람들이 이 메인 프레임에 접속해서 컴퓨터를 이용할 수 있었습니다.
그래서 모든 프로세싱은 어디서 한다? 메인 프레임에서 한다. 문제점 -> 메인 프레임의 부담이 크다.
그래서 나온게 서버-클라이언트 구조입니다. 이 구조는 개인의 컴퓨터 성능이 어느 정도 좋아야 해요.
클라이언트가 서버에 서비스를 요청하면 서버가 필요한 정보를 보내줍니다. 그러면 일정 부분 프로세싱은 클라이언트가 수행하게됩니다.
클라이언트 성능이 강력해짐에 따라 각 클라이언트가 전체 프로세싱에 참여하는 peer to peer 구조가 등장한다.
그런데 이제는 서버 성능도 강력해졌다. 다시 중앙 집중식으로 돌아가도 될 것 같다. 클라우드 컴퓨팅! 다만 현재는 법/윤리적 한계가 있어 더딘 상태.
★네트워크에서 가장 기본이 뭐다? 서버-클라이언트
웹서비스는 무엇을 서비스하는거죠? 웹 문서(HTML)를 전송합니다. https에 s(security)
ssl : 네트워크 뭐시기에 설치되는 암호화 모듈 -> ssl을 이용하는 http가 https이다.
웹 서버나 클라이언트에 암호화 모듈을 설치해서 사용하는 경우도 있는데, shttp입니다. 확장성이 딸려서 많진 않아요.
http는 hypertext transfer protocol의 약자고, 하이퍼텍스트는 하이퍼 링크로 연결된 텍스트죠.
하이퍼 링크를 제공하면 읽는 사람이 어떤 문서를 읽을지 결정할 수 있습니다.
웹 서비스를 이용해서 뭔가 돈을 벌려는 사람들이 많았겠죠? 돈을 받고 문서를 제공하려면 뭐가 필요합니까?
개인을 구분해야하고, 그러려면 인증이 필요하고, 그러려면 로그인이 필요하고, 그러려면 회원가입과 탈퇴 기능이 필요하죠.
이런 기능들은 정적인 문서가 아니라 동적인 기능입니다. 그런 기능을 만드려면 동적인 요소, 즉 프로그래밍이 필요합니다.
웹 문서에 각종 프로그래밍 요소를 집어넣어서 웹 서비스를 개발하는 것을 스크립트라고합니다. 웹 개발이라 함은 웹 문서와 스크립트를 만드는 것을 뜻합니다.
웹 서버 프로그램 중 가장 대표적인게 아파치, 자바 가상 머신에서 실행되는 톰캣, MS에서 만든 IIS 등이 있습니다.
포맷은 파일 시스템의 형태를 결정하는 것이고, 기록된 것을 읽을 수 없게되어 지워진 것으로 보인다.
현재 최신 windows 운영체제에는 서버로 사용할 수 있는 모든 기능이 내장되어있습니다.
정적 웹페이지는 웹 문서의 텍스트를 그대로 읽는 것이다. HTML, CSS
동적 웹페이지는 웹을 이용하여 각종 동적인 기능들을 제공하는 것이다. -> 스크립트가 함께 전송되어 브라우저를 통해 실행되는 것이다.
클라이언트 스크립트 언어 : JavaScript -> nodeJS(웹 외부에서 자바스크립트를 실행할 수 있음)
서버 스크립트 언어 : python, java, (PHP, ASP, JSP)

웹 문서는 html언어로 (하이퍼텍스트 마크업 언어)로 만들어짐
ip주소는 외우기 힘드니까 도메인메임을 쓰죠, 그리고 포트번호와 하이퍼링크 위치를 적어줍니다.
웹페이지의 구성요소 : HTML(구조와 내용), CSS(모양), JavaScript(응용프로그램)

라이브 서버를 이용해 html 실행해보는 방법 -> vscode 화면을 우클릭해서 open to live server